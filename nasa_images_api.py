import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import requests
import random
from dotenv import load_dotenv

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è NASA
NASA_IMAGES_URL = 'https://images-api.nasa.gov/search'

load_dotenv('.env')
API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_settings = {}

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–∞—á–∏ –æ–ø–∏—Å–∞–Ω–∏—è
desc_inline_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–° –æ–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="description_on"),
    InlineKeyboardButton(text="–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="description_off")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@dp.message(Command("start"))
async def start_handler(message: Message):
    start_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–∏—Ä –∫–æ—Å–º–æ—Å–∞!\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ - –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NASA –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ"
    )
    await message.answer(start_text)

# –ö–æ–º–∞–Ω–¥–∞ /help - –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@dp.message(Command("help"))
async def send_help(message: Message):
    help_text = (
        "‚ùì –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö\n"
        "/desc - –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤—ã–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ - –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NASA –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ"
    )
    await message.answer(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /desc
@dp.message(Command("desc"))
async def send_desc(message: Message):
   await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–∞—á–∏ –æ–ø–∏—Å–∞–Ω–∏—è', reply_markup=desc_inline_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–° –æ–ø–∏—Å–∞–Ω–∏–µ–º"
@dp.callback_query(F.data == "description_on")
async def desc_on(callback: CallbackQuery):
    user_settings[callback.from_user.id] = True
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
@dp.callback_query(F.data == "description_off")
async def desc_off(callback: CallbackQuery):
    user_settings[callback.from_user.id] = False
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
    await callback.answer()

@dp.message()
async def send_image_word(message: Message):
   user_id = message.from_user.id
   # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   show_desc = user_settings.get(user_id, True)
   # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—å ‚Äî –¥–æ–±–∞–≤–∏–º
   if user_id not in user_settings:
       user_settings[user_id] = True

   query = message.text
   query_params = {"q": query, "media_type": 'image'}
   response = requests.get(NASA_IMAGES_URL, params=query_params)
   if response.status_code == 200:
       res_json = response.json()
       items = res_json['collection']['items']
       if len(items) > 0:
           n = random.randint(0, len(items) - 1)
           image_url = res_json['collection']['items'][n]['links'][0]['href']
           title = res_json['collection']['items'][n]['data'][0]['title']
           description = res_json['collection']['items'][n]['data'][0]['description']
           if len(items) > 1:
               await message.answer(f'–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ {len(items)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É\n')
           await message.answer_photo(photo=image_url, caption=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {title}\n', parse_mode='HTML')
           if show_desc:
              await message.answer(f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:\n{description}', parse_mode='HTML')
       else:
           await message.answer("–ù–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
   else:
       await message.answer("–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


async def main():
   await dp.start_polling(bot)

if __name__ == '__main__':
   asyncio.run(main())